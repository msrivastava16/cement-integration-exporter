name: Deploy to DEV Environment - FIXED v2

on:
  pull_request:
    types: [closed]
    branches: [develop]
  issue_comment:
    types: [created]

jobs:
  deploy_to_dev:
    if: |
      (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop') ||
      (github.event.issue.pull_request && contains(github.event.comment.body, 'deploy'))
    runs-on: ubuntu-latest
    steps:
      - name: Debug - Verify Clean Workflow v2  
        run: |
          echo "‚úÖ FIXED WORKFLOW v2 - NO TRANSPORT CREATION"
          echo "üìã File: deploy_to_dev.yml (CLEAN VERSION)"
          echo "üöÄ API: /DeployIntegrationDesigntimeArtifact ONLY"
          echo "‚ùå NO TMS/transport calls in this workflow"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Get PR information
        id: get_pr_info
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_URL=$(jq -r ".issue.pull_request.url" "$GITHUB_EVENT_PATH")
            PR_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r ".head.ref")
            PR_MERGED=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r ".merged")
            COMMENT_BODY="${{ github.event.comment.body }}"
            DEPLOY_TRIGGER="comment"
          else
            PR_BRANCH="${{ github.event.pull_request.head.ref }}"
            PR_MERGED="true"
            COMMENT_BODY=""
            DEPLOY_TRIGGER="merge"
          fi
          
          echo "branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "merged=$PR_MERGED" >> $GITHUB_OUTPUT
          echo "deploy_trigger=$DEPLOY_TRIGGER" >> $GITHUB_OUTPUT

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_pr_info.outputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Parse iFlow Information
        id: parse_iflow
        run: |
          BRANCH="${{ steps.get_pr_info.outputs.branch }}"
          
          # Extract iFlow name from branch: feature/iflow-{name}-{env}
          IFLOW_NAME=$(echo "$BRANCH" | cut -d'-' -f3)
          
          echo "iflow_name=$IFLOW_NAME" >> $GITHUB_OUTPUT

      - name: Check deployment preference
        id: check_deploy
        run: |
          if [[ "${{ steps.get_pr_info.outputs.deploy_trigger }}" == "comment" ]]; then
            # For comment trigger, always deploy
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "deploy_reason=comment_trigger" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'deploy') }}" == "true" ]]; then
            # PR has "deploy" label - auto deploy
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "deploy_reason=auto_deploy_enabled" >> $GITHUB_OUTPUT
          else
            # Default to transport only
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "deploy_reason=transport_only" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to DEV (Auto)
        if: steps.check_deploy.outputs.should_deploy == 'true'
        run: |
          echo "üöÄ Direct deploying ${{ steps.parse_iflow.outputs.iflow_name }} to DEV..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import time
          
          def get_oauth_token():
              oauth_url = os.getenv('OAUTH_URL')
              client_id = os.getenv('CLIENT_ID')
              client_secret = os.getenv('CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå OAuth error: {e}', file=sys.stderr)
                  return None
          
          def deploy_to_dev():
              token = get_oauth_token()
              if not token:
                  sys.exit(1)
              
              base_url = os.getenv('BASE_URL')  # SAP CPI base URL
              iflow_name = '${{ steps.parse_iflow.outputs.iflow_name }}'
              
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              try:
                  # Direct deploy iFlow to DEV environment using Integration Content API
                  deploy_url = f'{base_url}/DeployIntegrationDesigntimeArtifact'
                  
                  deploy_payload = {
                      'Id': iflow_name,
                      'Version': 'active'
                  }
                  
                  print(f'Direct deploying iFlow {iflow_name} to DEV...', file=sys.stderr)
                  response = requests.post(deploy_url, headers=headers, json=deploy_payload, timeout=60)
                  
                  if response.status_code in [200, 202]:
                      print(f'‚úÖ Direct deployment to DEV initiated', file=sys.stderr)
                      
                      # Monitor deployment status
                      for i in range(18):  # Wait up to 3 minutes
                          time.sleep(10)
                          status_url = f'{base_url}/IntegrationRuntimeArtifacts?$filter=Id eq \'{iflow_name}\''
                          status_response = requests.get(status_url, headers=headers, timeout=30)
                          
                          if status_response.status_code == 200:
                              runtime_data = status_response.json()
                              if runtime_data.get('d', {}).get('results'):
                                  artifact = runtime_data['d']['results'][0]
                                  status = artifact.get('Status', 'UNKNOWN')
                                  print(f'üìä DEV deployment status: {status}', file=sys.stderr)
                                  
                                  if status in ['STARTED', 'SUCCESS']:
                                      print(f'‚úÖ {iflow_name} deployed successfully to DEV!')
                                      return
                                  elif status in ['ERROR', 'FAILED']:
                                      error_msg = artifact.get('ErrorInformation', {}).get('message', 'Unknown error')
                                      print(f'‚ùå DEV deployment failed: {error_msg}')
                                      sys.exit(1)
                          
                          print(f'‚è≥ Checking deployment status... ({i+1}/18)', file=sys.stderr)
                      
                      print(f'‚úÖ DEV deployment completed (check SAP CPI for final status)')
                  else:
                      print(f'‚ùå DEV deployment failed: {response.status_code} - {response.text}', file=sys.stderr)
                      sys.exit(1)
                  
              except Exception as e:
                  print(f'‚ùå DEV deployment error: {e}', file=sys.stderr)
                  sys.exit(1)
          
          deploy_to_dev()
          "
        env:
          OAUTH_URL: ${{ secrets.OAUTH_URL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          BASE_URL: ${{ secrets.BASE_URL }}

      - name: Deployment Status Summary
        run: |
          echo "üìã Direct deployment to DEV (no transport request needed)"
          echo "üè∑Ô∏è  Deployment decision: ${{ steps.check_deploy.outputs.deploy_reason }}"
          
          if [[ "${{ steps.check_deploy.outputs.should_deploy }}" == "true" ]]; then
            echo "‚úÖ Direct deployment completed to DEV environment"
            echo "üîó iFlow: ${{ steps.parse_iflow.outputs.iflow_name }}"
          else
            echo "‚è∏Ô∏è  No deployment performed (based on label/trigger)"
            echo "üí° To deploy: comment 'deploy' on the PR for immediate deployment"
          fi