name: Deploy iFlow Config

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]

jobs:
  deploy_iflow_config:
    if: |
      (github.event.issue.pull_request && contains(github.event.comment.body, 'deploy') && contains(github.event.comment.body, 'TEST')) ||
      (github.event.issue.pull_request && startsWith(github.event.comment.body, '/deploy'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Get PR information
        id: get_pr_info
        run: |
          PR_URL=$(jq -r ".issue.pull_request.url" "$GITHUB_EVENT_PATH")
          PR_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r ".head.ref")
          PR_MERGED=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r ".merged")
          COMMENT_BODY="${{ github.event.comment.body }}"
          
          echo "branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "merged=$PR_MERGED" >> $GITHUB_OUTPUT
          echo "comment_body=$COMMENT_BODY" >> $GITHUB_OUTPUT

      - name: Parse deployment parameters
        id: parse_params
        run: |
          BRANCH="${{ steps.get_pr_info.outputs.branch }}"
          COMMENT="${{ steps.get_pr_info.outputs.comment_body }}"
          
          # Extract iFlow name and environment from branch name
          # Example: feature/iflow-my-iflow-dev -> my-iflow, dev
          IFLOW_NAME=$(echo "$BRANCH" | cut -d'-' -f3)
          ENVIRONMENT=$(echo "$BRANCH" | cut -d'-' -f4)
          
          # Check if TEST environment is specified in comment
          if echo "$COMMENT" | grep -i "deploy.*TEST\|TEST.*deploy" > /dev/null; then
            DEPLOY_ENV="TEST"
          else
            DEPLOY_ENV="$ENVIRONMENT"
          fi
          
          echo "iflow_name=$IFLOW_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "deploy_env=$DEPLOY_ENV" >> $GITHUB_OUTPUT

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_pr_info.outputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Debug Environment Variables
        run: |
          echo "TMS_OAUTH_URL length: ${#TMS_OAUTH_URL}"
          echo "TMS_CLIENT_ID length: ${#TMS_CLIENT_ID}"
          echo "TMS_BASE_URL length: ${#TMS_BASE_URL}"
          echo "Branch: ${{ steps.get_pr_info.outputs.branch }}"
          echo "Merged: ${{ steps.get_pr_info.outputs.merged }}"
          echo "Deploy Env: ${{ steps.parse_params.outputs.deploy_env }}"
          echo "Workflow triggered because: deploy_env='${{ steps.parse_params.outputs.deploy_env }}' and merged='${{ steps.get_pr_info.outputs.merged }}'"
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}

      - name: Step 1 - Create Transport Request
        id: create_transport
        if: steps.parse_params.outputs.deploy_env == 'TEST' && steps.get_pr_info.outputs.merged == 'true'
        run: |
          echo "üöõ Step 1: Creating transport request for iFlow ${{ steps.parse_params.outputs.iflow_name }}..."
          
          TRANSPORT_ID=$(python3 -c "
          import requests
          import json
          import os
          import sys
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')  
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def create_transport_request():
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              iflow_name = '${{ steps.parse_params.outputs.iflow_name }}'
              
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              # Create transport request using TMS export API
              export_data = {
                  'nodeName': 'DEV_NODE',
                  'contentType': 'MTA',
                  'storageType': 'FILE', 
                  'entries': [
                      {
                          'uri': iflow_name
                      }
                  ],
                  'description': f'Export iFlow {iflow_name} to TEST - PR #{os.getenv(\"GITHUB_RUN_NUMBER\", \"unknown\")}',
                  'namedUser': 'GitHub Actions'
              }
              
              try:
                  # Use correct TMS export endpoint
                  export_url = f'{tms_url}/nodes/export'
                  
                  print(f'Creating transport via export to DEV_NODE', file=sys.stderr)
                  print(f'Export URL: {export_url}', file=sys.stderr)
                  print(f'Export data: {json.dumps(export_data, indent=2)}', file=sys.stderr)
                  
                  response = requests.post(export_url, headers=headers, json=export_data, timeout=60)
                  
                  if response.status_code in [200, 201]:
                      result = response.json()
                      transport_id = result.get('transportRequestId', result.get('id'))
                      print(f'‚úÖ Transport request created via export: {transport_id}', file=sys.stderr)
                      print(transport_id)
                      return transport_id
                  else:
                      print(f'‚ùå Export failed: {response.status_code} - {response.text}', file=sys.stderr)
                      # Fallback to direct transport creation
                      print('Trying fallback: direct transport creation...', file=sys.stderr)
                      
                      create_url = f'{tms_url}/v2/transportRequests'
                      response2 = requests.post(create_url, headers=headers, json=transport_data, timeout=60)
                      
                      if response2.status_code in [200, 201]:
                          result = response2.json()
                          transport_id = result.get('transportRequestId', result.get('id'))
                          print(f'‚úÖ Transport request created (fallback): {transport_id}', file=sys.stderr)
                          print(transport_id)
                          return transport_id
                      else:
                          print(f'‚ùå Fallback also failed: {response2.status_code} - {response2.text}', file=sys.stderr)
                          sys.exit(1)
                      
              except Exception as e:
                  print(f'‚ùå Transport creation error: {e}', file=sys.stderr)
                  sys.exit(1)
          
          create_transport_request()
          ")
          
          echo "transport_id=$TRANSPORT_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Transport request created: $TRANSPORT_ID"
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}

      - name: Step 2 - Download and Upload iFlow Package
        id: upload_package
        if: steps.create_transport.outputs.transport_id != ''
        run: |
          echo "üì¶ Step 2: Downloading and uploading iFlow package to transport..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import zipfile
          import tempfile
          
          def get_ci_token():
              oauth_url = os.getenv('OAUTH_URL')
              client_id = os.getenv('CLIENT_ID')
              client_secret = os.getenv('CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå CI OAuth error: {e}', file=sys.stderr)
                  return None
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def download_iflow_package(ci_token, iflow_name):
              base_url = os.getenv('BASE_URL')
              headers = {
                  'Authorization': f'Bearer {ci_token}',
                  'Accept': 'application/zip'
              }
              
              try:
                  # Download iFlow as ZIP package
                  download_url = f'{base_url}/IntegrationDesigntimeArtifacts(Id=\\'{iflow_name}\\',Version=\\'active\\')/$value'
                  print(f'Downloading iFlow package from CI...', file=sys.stderr)
                  
                  response = requests.get(download_url, headers=headers, timeout=120)
                  
                  if response.status_code == 200:
                      # Save to temporary file
                      temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.zip')
                      temp_file.write(response.content)
                      temp_file.close()
                      
                      print(f'‚úÖ Downloaded iFlow package ({len(response.content)} bytes)', file=sys.stderr)
                      return temp_file.name
                  else:
                      print(f'‚ùå Download failed: {response.status_code} - {response.text}', file=sys.stderr)
                      return None
                      
              except Exception as e:
                  print(f'‚ùå Download error: {e}', file=sys.stderr)
                  return None
          
          def upload_to_tms(tms_token, package_file, transport_id):
              tms_url = os.getenv('TMS_BASE_URL')
              iflow_name = '${{ steps.parse_params.outputs.iflow_name }}'
              
              headers = {
                  'Authorization': f'Bearer {tms_token}'
              }
              
              try:
                  # Upload file to TMS
                  upload_url = f'{tms_url}/v2/files/upload'
                  print(f'Uploading package to TMS...', file=sys.stderr)
                  
                  with open(package_file, 'rb') as f:
                      files = {
                          'file': (f'{iflow_name}.zip', f, 'application/zip')
                      }
                      data = {
                          'transportRequestId': transport_id,
                          'applicationId': iflow_name,
                          'applicationName': iflow_name,
                          'applicationType': 'INTEGRATION_FLOW'
                      }
                      
                      response = requests.post(upload_url, headers=headers, files=files, data=data, timeout=120)
                  
                  if response.status_code in [200, 201]:
                      result = response.json() if response.text else {}
                      file_id = result.get('fileId', 'uploaded')
                      print(f'‚úÖ Package uploaded to transport {transport_id}', file=sys.stderr)
                      return file_id
                  else:
                      print(f'‚ùå Upload failed: {response.status_code} - {response.text}', file=sys.stderr)
                      return None
                      
              except Exception as e:
                  print(f'‚ùå Upload error: {e}', file=sys.stderr)
                  return None
              finally:
                  # Clean up temp file
                  try:
                      os.unlink(package_file)
                  except:
                      pass
          
          def main():
              iflow_name = '${{ steps.parse_params.outputs.iflow_name }}'
              transport_id = '${{ steps.create_transport.outputs.transport_id }}'
              
              # Get tokens
              ci_token = get_ci_token()
              tms_token = get_tms_token()
              
              if not ci_token or not tms_token:
                  sys.exit(1)
              
              # Download iFlow package from CI
              package_file = download_iflow_package(ci_token, iflow_name)
              if not package_file:
                  sys.exit(1)
              
              # Upload package to TMS transport
              file_id = upload_to_tms(tms_token, package_file, transport_id)
              if not file_id:
                  sys.exit(1)
              
              print(f'‚úÖ iFlow package successfully added to transport {transport_id}')
          
          main()
          "
        env:
          # CI credentials for downloading
          OAUTH_URL: ${{ secrets.OAUTH_URL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          BASE_URL: ${{ secrets.BASE_URL }}
          # TMS credentials for uploading
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}

      - name: Step 3 - Import Transport to TEST Environment
        id: import_transport
        if: steps.create_transport.outputs.transport_id != ''
        run: |
          echo "üéØ Step 3: Importing transport to TEST environment..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import time
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def get_test_node(token, tms_url):
              headers = {'Authorization': f'Bearer {token}'}
              try:
                  response = requests.get(f'{tms_url}/v2/nodes', headers=headers, timeout=30)
                  response.raise_for_status()
                  nodes = response.json()
                  
                  # Find TEST node
                  test_node_id = os.getenv('TMS_TEST_NODE_ID')
                  if test_node_id:
                      return test_node_id
                  
                  for node in nodes:
                      if 'TEST' in node.get('name', '').upper():
                          return node.get('id')
                  
                  # Fallback to first node
                  return nodes[0].get('id') if nodes else None
                  
              except Exception as e:
                  print(f'‚ùå Error getting nodes: {e}', file=sys.stderr)
                  return None
          
          def import_transport(token, tms_url, node_id, transport_id):
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              import_data = {
                  'transportRequestId': transport_id
              }
              
              try:
                  import_url = f'{tms_url}/v2/nodes/{node_id}/transportRequests/import'
                  print(f'Importing transport {transport_id} to node {node_id}...', file=sys.stderr)
                  
                  response = requests.post(import_url, headers=headers, json=import_data, timeout=60)
                  
                  if response.status_code in [200, 202]:
                      print(f'‚úÖ Import initiated to TEST environment', file=sys.stderr)
                      return True
                  else:
                      print(f'‚ùå Import failed: {response.status_code} - {response.text}', file=sys.stderr)
                      return False
                      
              except Exception as e:
                  print(f'‚ùå Import error: {e}', file=sys.stderr)
                  return False
          
          def main():
              transport_id = '${{ steps.create_transport.outputs.transport_id }}'
              
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              
              # Get TEST node
              test_node_id = get_test_node(token, tms_url)
              if not test_node_id:
                  print('‚ùå Could not find TEST node', file=sys.stderr)
                  sys.exit(1)
              
              print(f'Using TEST node: {test_node_id}', file=sys.stderr)
              
              # Import transport
              success = import_transport(token, tms_url, test_node_id, transport_id)
              if not success:
                  sys.exit(1)
              
              print(f'‚úÖ Transport {transport_id} imported to TEST environment')
          
          main()
          "
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}
          TMS_TEST_NODE_ID: ${{ secrets.TMS_TEST_NODE_ID }}

      - name: Step 4 - Deploy and Monitor Status
        if: steps.create_transport.outputs.transport_id != ''
        run: |
          echo "üöÄ Step 4: Deploying and monitoring transport status..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import time
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def get_test_node(token, tms_url):
              headers = {'Authorization': f'Bearer {token}'}
              try:
                  response = requests.get(f'{tms_url}/v2/nodes', headers=headers, timeout=30)
                  response.raise_for_status()
                  nodes = response.json()
                  
                  test_node_id = os.getenv('TMS_TEST_NODE_ID')
                  if test_node_id:
                      return test_node_id
                  
                  for node in nodes:
                      if 'TEST' in node.get('name', '').upper():
                          return node.get('id')
                  
                  return nodes[0].get('id') if nodes else None
                  
              except Exception as e:
                  print(f'‚ùå Error getting nodes: {e}', file=sys.stderr)
                  return None
          
          def monitor_transport_status(token, tms_url, node_id, transport_id):
              headers = {'Authorization': f'Bearer {token}'}
              
              print(f'Monitoring transport {transport_id} status...', file=sys.stderr)
              
              for i in range(36):  # Wait up to 6 minutes
                  try:
                      status_url = f'{tms_url}/v2/nodes/{node_id}/transportRequests'
                      response = requests.get(status_url, headers=headers, timeout=30)
                      
                      if response.status_code == 200:
                          requests_data = response.json()
                          for req in requests_data:
                              if req.get('transportRequestId') == transport_id:
                                  status = req.get('status', 'UNKNOWN')
                                  print(f'üìä Transport status: {status}', file=sys.stderr)
                                  
                                  if status in ['SUCCESS', 'COMPLETED']:
                                      print(f'‚úÖ Transport {transport_id} deployed successfully!')
                                      print(f'üéâ iFlow is now available in TEST environment')
                                      return True
                                  elif status in ['ERROR', 'FAILED']:
                                      error_msg = req.get('errorMessage', 'Unknown error')
                                      print(f'‚ùå Transport {transport_id} failed: {error_msg}')
                                      return False
                                  elif status in ['RUNNING', 'IN_PROGRESS']:
                                      print(f'‚è≥ Transport in progress... ({i+1}/36)', file=sys.stderr)
                      
                      time.sleep(10)
                  except Exception as e:
                      print(f'‚ö†Ô∏è  Status check error: {e}', file=sys.stderr)
              
              print(f'‚è∞ Transport timeout - check TMS cockpit for final status')
              return True  # Don't fail on timeout
          
          def main():
              transport_id = '${{ steps.create_transport.outputs.transport_id }}'
              
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              
              # Get TEST node
              test_node_id = get_test_node(token, tms_url)
              if not test_node_id:
                  print('‚ùå Could not find TEST node', file=sys.stderr)
                  sys.exit(1)
              
              # Monitor status
              success = monitor_transport_status(token, tms_url, test_node_id, transport_id)
              
              if success:
                  print(f'‚úÖ Complete! iFlow ${{ steps.parse_params.outputs.iflow_name }} deployed to TEST via transport {transport_id}')
              else:
                  sys.exit(1)
          
          main()
          "
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}
          TMS_TEST_NODE_ID: ${{ secrets.TMS_TEST_NODE_ID }}

      - name: Standard iFlow Config Deployment
        if: steps.parse_params.outputs.deploy_env != 'TEST' || steps.get_pr_info.outputs.merged != 'true'
        run: |
          echo "Deploying iFlow configuration for ${{ steps.parse_params.outputs.deploy_env }} environment..."
          
          IFLOW_NAME="${{ steps.parse_params.outputs.iflow_name }}"
          ENVIRONMENT="${{ steps.parse_params.outputs.deploy_env }}"
          CONFIG_FILE="config/${IFLOW_NAME}_active_${ENVIRONMENT}.json"
          
          echo "Config file: $CONFIG_FILE"
          
          if [ -f "$CONFIG_FILE" ]; then
            echo "Configuration file found, proceeding with deployment..."
            python create_iflow_config.py --iflow "$IFLOW_NAME" --env "$ENVIRONMENT"
          else
            echo "Configuration file not found: $CONFIG_FILE"
            echo "Creating new configuration..."
            python create_iflow_config.py --iflow "$IFLOW_NAME" --env "$ENVIRONMENT"
          fi
        env:
          OAUTH_URL: ${{ secrets.OAUTH_URL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          BASE_URL: ${{ secrets.BASE_URL }}
          PACKAGE_URL: ${{ secrets.PACKAGE_URL }}
          ARTIFACTS_URL: ${{ secrets.ARTIFACTS_URL }}
