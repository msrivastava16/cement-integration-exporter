name: Deploy iFlow Config

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]

jobs:
  deploy_iflow_config:
    if: |
      (github.event.issue.pull_request && contains(github.event.comment.body, 'deploy') && contains(github.event.comment.body, 'TEST')) ||
      (github.event.issue.pull_request && startsWith(github.event.comment.body, '/deploy'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Get PR information
        id: get_pr_info
        run: |
          PR_URL=$(jq -r ".issue.pull_request.url" "$GITHUB_EVENT_PATH")
          PR_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r ".head.ref")
          PR_MERGED=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_URL | jq -r ".merged")
          COMMENT_BODY="${{ github.event.comment.body }}"
          
          echo "branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "merged=$PR_MERGED" >> $GITHUB_OUTPUT
          echo "comment_body=$COMMENT_BODY" >> $GITHUB_OUTPUT

      - name: Parse deployment parameters
        id: parse_params
        run: |
          BRANCH="${{ steps.get_pr_info.outputs.branch }}"
          COMMENT="${{ steps.get_pr_info.outputs.comment_body }}"
          
          # Extract iFlow name and environment from branch name
          # Example: feature/iflow-my-iflow-dev -> my-iflow, dev
          IFLOW_NAME=$(echo "$BRANCH" | cut -d'-' -f3)
          ENVIRONMENT=$(echo "$BRANCH" | cut -d'-' -f4)
          
          # Check if TEST environment is specified in comment
          if echo "$COMMENT" | grep -i "deploy.*TEST\|TEST.*deploy" > /dev/null; then
            DEPLOY_ENV="TEST"
          else
            DEPLOY_ENV="$ENVIRONMENT"
          fi
          
          echo "iflow_name=$IFLOW_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "deploy_env=$DEPLOY_ENV" >> $GITHUB_OUTPUT

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_pr_info.outputs.branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Deploy iFlow via TMS v2 Import API
        if: steps.parse_params.outputs.deploy_env == 'TEST' && steps.get_pr_info.outputs.merged == 'true'
        run: |
          echo "Deploying iFlow ${{ steps.parse_params.outputs.iflow_name }} to TEST environment via TMS..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import time
          
          def get_oauth_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')  
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              if not all([oauth_url, client_id, client_secret]):
                  print('‚ùå Missing TMS OAuth credentials. Check GitHub secrets.', file=sys.stderr)
                  return None
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  token = response.json()['access_token']
                  print('‚úÖ TMS OAuth token obtained successfully', file=sys.stderr)
                  return token
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  if 'response' in locals():
                      print(f'Response: {response.status_code} - {response.text}', file=sys.stderr)
                  return None
          
          def get_nodes(token, tms_url):
              headers = {'Authorization': f'Bearer {token}'}
              try:
                  response = requests.get(f'{tms_url}/v2/nodes', headers=headers, timeout=30)
                  response.raise_for_status()
                  nodes = response.json()
                  print(f'‚úÖ Found {len(nodes)} TMS nodes', file=sys.stderr)
                  return nodes
              except Exception as e:
                  print(f'‚ùå Error getting nodes: {e}', file=sys.stderr)
                  return []
          
          def import_to_test_node(token, tms_url, target_node_id, iflow_name):
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              # Prepare import request
              import_data = {
                  'transportRequestDescription': f'Deploy {iflow_name} to TEST via GitHub Actions',
                  'applications': [
                      {
                          'applicationId': iflow_name,
                          'applicationName': iflow_name,
                          'applicationType': 'INTEGRATION_FLOW'
                      }
                  ]
              }
              
              try:
                  import_url = f'{tms_url}/v2/nodes/{target_node_id}/transportRequests/import'
                  print(f'üöÄ Importing to node {target_node_id}...', file=sys.stderr)
                  
                  response = requests.post(import_url, headers=headers, json=import_data, timeout=60)
                  
                  if response.status_code in [200, 202]:
                      result = response.json()
                      transport_id = result.get('transportRequestId')
                      print(f'‚úÖ Import initiated. Transport ID: {transport_id}', file=sys.stderr)
                      return transport_id
                  else:
                      print(f'‚ùå Import failed: {response.status_code} - {response.text}', file=sys.stderr)
                      return None
                      
              except Exception as e:
                  print(f'‚ùå Import error: {e}', file=sys.stderr)
                  return None
          
          def monitor_transport_status(token, tms_url, node_id, transport_id):
              headers = {'Authorization': f'Bearer {token}'}
              
              for i in range(30):  # Wait up to 5 minutes
                  try:
                      status_url = f'{tms_url}/v2/nodes/{node_id}/transportRequests'
                      response = requests.get(status_url, headers=headers, timeout=30)
                      
                      if response.status_code == 200:
                          requests_data = response.json()
                          for req in requests_data:
                              if req.get('transportRequestId') == transport_id:
                                  status = req.get('status')
                                  print(f'Transport status: {status}', file=sys.stderr)
                                  
                                  if status == 'SUCCESS':
                                      print(f'‚úÖ Transport {transport_id} completed successfully')
                                      return True
                                  elif status == 'ERROR':
                                      print(f'‚ùå Transport {transport_id} failed')
                                      return False
                      
                      time.sleep(10)
                  except Exception as e:
                      print(f'‚ö†Ô∏è  Status check error: {e}', file=sys.stderr)
              
              print(f'‚ö†Ô∏è  Transport timeout - check TMS manually for status')
              return True
          
          def main():
              token = get_oauth_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              iflow_name = '${{ steps.parse_params.outputs.iflow_name }}'
              target_node = os.getenv('TMS_TEST_NODE_ID', 'TEST')
              
              if not tms_url:
                  print('‚ùå TMS_BASE_URL not configured', file=sys.stderr)
                  sys.exit(1)
              
              # Get available nodes
              nodes = get_nodes(token, tms_url)
              
              # Find TEST node
              test_node_id = None
              for node in nodes:
                  if node.get('name', '').upper() == 'TEST' or node.get('id') == target_node:
                      test_node_id = node.get('id')
                      print(f'‚úÖ Found TEST node: {test_node_id}', file=sys.stderr)
                      break
              
              if not test_node_id:
                  print(f'‚ùå TEST node not found. Available nodes: {[n.get(\"name\") for n in nodes]}', file=sys.stderr)
                  sys.exit(1)
              
              # Import to TEST node
              transport_id = import_to_test_node(token, tms_url, test_node_id, iflow_name)
              
              if transport_id:
                  # Monitor status
                  monitor_transport_status(token, tms_url, test_node_id, transport_id)
              else:
                  sys.exit(1)
          
          main()
          "
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}
          TMS_TEST_NODE_ID: ${{ secrets.TMS_TEST_NODE_ID }}

      - name: Standard iFlow Config Deployment
        if: steps.parse_params.outputs.deploy_env != 'TEST' || steps.get_pr_info.outputs.merged != 'true'
        run: |
          echo "Deploying iFlow configuration for ${{ steps.parse_params.outputs.deploy_env }} environment..."
          
          IFLOW_NAME="${{ steps.parse_params.outputs.iflow_name }}"
          ENVIRONMENT="${{ steps.parse_params.outputs.deploy_env }}"
          CONFIG_FILE="config/${IFLOW_NAME}_active_${ENVIRONMENT}.json"
          
          echo "Config file: $CONFIG_FILE"
          
          if [ -f "$CONFIG_FILE" ]; then
            echo "Configuration file found, proceeding with deployment..."
            python create_iflow_config.py --iflow "$IFLOW_NAME" --env "$ENVIRONMENT"
          else
            echo "Configuration file not found: $CONFIG_FILE"
            echo "Creating new configuration..."
            python create_iflow_config.py --iflow "$IFLOW_NAME" --env "$ENVIRONMENT"
          fi
        env:
          OAUTH_URL: ${{ secrets.OAUTH_URL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          BASE_URL: ${{ secrets.BASE_URL }}
          PACKAGE_URL: ${{ secrets.PACKAGE_URL }}
          ARTIFACTS_URL: ${{ secrets.ARTIFACTS_URL }}
