name: Deploy to TEST Environment

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  deploy_to_test:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    environment: production  # GitHub Environment with approval
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Parse iFlow information
        id: parse_iflow
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          
          # Extract iFlow name from branch: feature/iflow-{name}-{env}
          IFLOW_NAME=$(echo "$BRANCH" | cut -d'-' -f3)
          ENVIRONMENT="test"
          
          echo "iflow_name=$IFLOW_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "config_file=config/${IFLOW_NAME}_active_test.json" >> $GITHUB_OUTPUT

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create Transport Request to PROD
        id: create_transport
        run: |
          echo "üöõ Creating transport request for ${{ steps.parse_iflow.outputs.iflow_name }} to PROD..."
          
          TRANSPORT_ID=$(python3 -c "
          import requests
          import json
          import os
          import sys
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def create_transport_request():
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              iflow_name = '${{ steps.parse_iflow.outputs.iflow_name }}'
              
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              # Create transport request using TMS export API for PROD
              export_data = {
                  'nodeName': 'DEV_NODE',
                  'contentType': 'MTA',
                  'storageType': 'FILE', 
                  'entries': [
                      {
                          'uri': iflow_name
                      }
                  ],
                  'description': f'Deploy {iflow_name} to PROD - PR #${{ github.event.number }} [APPROVAL REQUIRED]',
                  'namedUser': 'GitHub Actions PROD'
              }
              
              try:
                  export_url = f'{tms_url}/nodes/export'
                  print(f'Creating PROD transport via: {export_url}', file=sys.stderr)
                  
                  response = requests.post(export_url, headers=headers, json=export_data, timeout=60)
                  
                  if response.status_code in [200, 201]:
                      result = response.json()
                      transport_id = result.get('transportRequestId', result.get('id'))
                      print(f'‚úÖ PROD transport request created: {transport_id}', file=sys.stderr)
                      print(transport_id)
                      return transport_id
                  else:
                      print(f'‚ùå PROD transport creation failed: {response.status_code} - {response.text}', file=sys.stderr)
                      sys.exit(1)
                      
              except Exception as e:
                  print(f'‚ùå Transport creation error: {e}', file=sys.stderr)
                  sys.exit(1)
          
          create_transport_request()
          ")
          
          echo "transport_id=$TRANSPORT_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ PROD Transport request created: $TRANSPORT_ID"
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}

      - name: Request CTMS Approval
        id: request_approval
        run: |
          echo "üìã Requesting CTMS approval for transport ${{ steps.create_transport.outputs.transport_id }}..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def request_ctms_approval():
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              transport_id = '${{ steps.create_transport.outputs.transport_id }}'
              
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              try:
                  # Set transport to approval required status
                  approval_url = f'{tms_url}/v2/transportRequests/{transport_id}/approval'
                  approval_data = {
                      'action': 'REQUEST_APPROVAL',
                      'comment': 'GitHub Actions requesting approval for PROD deployment',
                      'approver': 'PROD_APPROVER_GROUP'
                  }
                  
                  print(f'Requesting approval for transport: {transport_id}', file=sys.stderr)
                  response = requests.post(approval_url, headers=headers, json=approval_data, timeout=60)
                  
                  if response.status_code in [200, 202]:
                      print(f'‚úÖ Approval requested for transport {transport_id}', file=sys.stderr)
                      print(f'üìß Notification sent to approvers')
                      print(f'üîó Approve via TMS Cockpit: {tms_url.replace(\"/api/v1\", \"\")}/transportRequests/{transport_id}')
                  else:
                      print(f'‚ö†Ô∏è  Approval request response: {response.status_code} - {response.text}', file=sys.stderr)
                      print(f'üí° Manual approval may be required via TMS Cockpit')
                  
              except Exception as e:
                  print(f'‚ùå Approval request error: {e}', file=sys.stderr)
                  print(f'üí° Manual approval required via TMS Cockpit')
          
          request_ctms_approval()
          "
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}

      - name: Wait for CTMS Approval
        id: wait_approval
        run: |
          echo "‚è≥ Waiting for CTMS approval for transport ${{ steps.create_transport.outputs.transport_id }}..."
          echo "üìã Transport Status: PENDING_APPROVAL"
          echo "üîó Approve manually in TMS Cockpit if automated approval fails"
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import time
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def wait_for_approval():
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              transport_id = '${{ steps.create_transport.outputs.transport_id }}'
              
              headers = {'Authorization': f'Bearer {token}'}
              
              print(f'Monitoring approval status for transport: {transport_id}', file=sys.stderr)
              
              # Wait up to 30 minutes for approval
              for i in range(180):  # 30 minutes (10 second intervals)
                  try:
                      status_url = f'{tms_url}/v2/transportRequests/{transport_id}'
                      response = requests.get(status_url, headers=headers, timeout=30)
                      
                      if response.status_code == 200:
                          transport_data = response.json()
                          status = transport_data.get('status', 'UNKNOWN')
                          approval_status = transport_data.get('approvalStatus', 'UNKNOWN')
                          
                          print(f'üìä Status: {status}, Approval: {approval_status}', file=sys.stderr)
                          
                          if approval_status in ['APPROVED', 'AUTO_APPROVED']:
                              print(f'‚úÖ Transport {transport_id} approved! Proceeding with deployment.')
                              return True
                          elif approval_status in ['REJECTED', 'DENIED']:
                              print(f'‚ùå Transport {transport_id} rejected. Deployment cancelled.')
                              sys.exit(1)
                          elif i % 30 == 0:  # Print every 5 minutes
                              print(f'‚è≥ Still waiting for approval... ({i//6}/30 minutes)', file=sys.stderr)
                      
                      time.sleep(10)
                  except Exception as e:
                      print(f'‚ö†Ô∏è  Status check error: {e}', file=sys.stderr)
              
              print(f'‚è∞ Approval timeout after 30 minutes. Please check TMS Cockpit manually.')
              print(f'üîó Transport ID: {transport_id}')
              sys.exit(1)
          
          wait_for_approval()
          "
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}

      - name: Deploy to PROD
        run: |
          echo "üöÄ Deploying approved transport ${{ steps.create_transport.outputs.transport_id }} to PROD..."
          
          python3 -c "
          import requests
          import json
          import os
          import sys
          import time
          
          def get_tms_token():
              oauth_url = os.getenv('TMS_OAUTH_URL')
              client_id = os.getenv('TMS_CLIENT_ID')
              client_secret = os.getenv('TMS_CLIENT_SECRET')
              
              payload = {
                  'grant_type': 'client_credentials',
                  'client_id': client_id,
                  'client_secret': client_secret
              }
              
              try:
                  response = requests.post(oauth_url, data=payload, timeout=30)
                  response.raise_for_status()
                  return response.json()['access_token']
              except Exception as e:
                  print(f'‚ùå TMS OAuth error: {e}', file=sys.stderr)
                  return None
          
          def deploy_to_prod():
              token = get_tms_token()
              if not token:
                  sys.exit(1)
              
              tms_url = os.getenv('TMS_BASE_URL')
              transport_id = '${{ steps.create_transport.outputs.transport_id }}'
              prod_node_id = '6'  # TARGET_NODE ID (PROD)
              
              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }
              
              try:
                  # Import transport to PROD node
                  import_url = f'{tms_url}/v2/nodes/{prod_node_id}/transportRequests/import'
                  import_data = {'transportRequestId': transport_id}
                  
                  print(f'Importing approved transport {transport_id} to PROD node {prod_node_id}...', file=sys.stderr)
                  response = requests.post(import_url, headers=headers, json=import_data, timeout=60)
                  
                  if response.status_code in [200, 202]:
                      print(f'‚úÖ Import to PROD initiated', file=sys.stderr)
                      
                      # Monitor deployment status
                      for i in range(36):  # Wait up to 6 minutes
                          time.sleep(10)
                          status_url = f'{tms_url}/v2/nodes/{prod_node_id}/transportRequests'
                          status_response = requests.get(status_url, headers=headers, timeout=30)
                          
                          if status_response.status_code == 200:
                              requests_data = status_response.json()
                              for req in requests_data:
                                  if req.get('transportRequestId') == transport_id:
                                      status = req.get('status', 'UNKNOWN')
                                      print(f'üìä PROD deployment status: {status}', file=sys.stderr)
                                      
                                      if status in ['SUCCESS', 'COMPLETED']:
                                          print(f'üéâ {transport_id} deployed successfully to PROD!')
                                          print(f'‚úÖ iFlow ${{ steps.parse_iflow.outputs.iflow_name }} is now live in PRODUCTION!')
                                          return
                                      elif status in ['ERROR', 'FAILED']:
                                          error_msg = req.get('errorMessage', 'Unknown error')
                                          print(f'‚ùå PROD deployment failed: {error_msg}')
                                          sys.exit(1)
                          
                          print(f'‚è≥ Checking PROD deployment status... ({i+1}/36)', file=sys.stderr)
                      
                      print(f'‚úÖ PROD deployment completed (check TMS for final status)')
                  else:
                      print(f'‚ùå PROD import failed: {response.status_code} - {response.text}', file=sys.stderr)
                      sys.exit(1)
                  
              except Exception as e:
                  print(f'‚ùå PROD deployment error: {e}', file=sys.stderr)
                  sys.exit(1)
          
          deploy_to_prod()
          "
        env:
          TMS_OAUTH_URL: ${{ secrets.TMS_OAUTH_URL }}
          TMS_CLIENT_ID: ${{ secrets.TMS_CLIENT_ID }}
          TMS_CLIENT_SECRET: ${{ secrets.TMS_CLIENT_SECRET }}
          TMS_BASE_URL: ${{ secrets.TMS_BASE_URL }}